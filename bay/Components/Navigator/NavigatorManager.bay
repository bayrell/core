/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Navigator;

use Runtime.RuntimeUtils;
use Core.Components.ContextMenu.ContextMenuItemClickEvent;
use Core.Components.Navigator.NavigatorItem;
use Core.Components.Navigator.NavigatorItemEvent;
use Core.Components.Navigator.NavigatorItemEvent;
use Core.Components.Tree.TreeItem;
use Core.Components.Tree.TreeItemSelectEvent;
use Core.Components.Tree.TreeItemContextMenuEvent;
use Core.Components.Tree.TreeItemDoubleClickEvent;
use Core.Components.Tree.TreeManager;
use Core.Components.Tree.TreeModel;
use Core.FileSystem.FileNode;
use Core.Http.ApiRequest;
use Core.UI.UIController;
use Core.UI.Annotations.BindValue;
use Core.UI.Annotations.BindModel;
use Core.UI.Annotations.Event;
use Core.UI.Annotations.EventAsync;
use Core.UI.Events.ModelChange;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Events.MouseEvent.MouseDoubleClickEvent;
use Core.UI.Events.MouseEvent.MouseContextMenuEvent;
use Core.UI.Events.UserEvent.ChangeEvent;
use Core.UI.Render.CoreManager;


class NavigatorManager extends TreeManager
{
	public NavigatorModel model;
	
	
	/**
	 * Create new item
	 */
	public TreeItem newItem(Dict map)
	{
		return new NavigatorItem(map);
	}
	
	
	
	/**
	 * Event create node
	 */
	public async void createNode(Collection<int> path, int pos, NavigatorItem item)
	{
		Collection<int> path = path.pushIm(pos);
		string path_str = "/" ~ TreeModel::getNamePath(this.model, path);
		
		if (item.kind == NavigatorItem::KIND_FILE or item.kind == NavigatorItem::KIND_FOLDER)
		{
			string api_kind = FileNode::KIND_FILE;
			if (item.kind == NavigatorItem::KIND_FOLDER) api_kind = FileNode::KIND_FOLDER;
			
			/* Signal out */
			this.signalOut( 
				new NavigatorItemEvent
				{ 
					"kind": NavigatorItemEvent::KIND_CREATE_START,
					"item": item,
					"path": path,
				} 
			);
			
			ApiResult res = await ApiRequest::callApi(
				this.model.api_class_name,
				"Core.FileSystem.FileTransferInterface",
				"createNode",
				{
					"path": path_str,
					"kind": api_kind,
					"clear": true,
				}
			);
			
			/* Signal out */
			this.signalOut( 
				new NavigatorItemEvent
				{ 
					"kind": NavigatorItemEvent::KIND_CREATE_END,
					"item": item,
					"path": path,
					"res": res,
				} 
			);
			
		}
	}
	
	
	
	/**
	 * Event rename node
	 */
	public async void renameNode(Collection<int> path, NavigatorItem item_old, NavigatorItem item_new)
	{
		Collection<int> p_path = path.removeLastIm();
		string path_str = "/" ~ TreeModel::getNamePath(this.model, p_path);
		string path_old = path_str ~ "/" ~ item_old.name;
		string old_name = item_old.name;
		string new_name = item_new.name;
		
		if (item_old.kind == NavigatorItem::KIND_FILE or item_old.kind == NavigatorItem::KIND_FOLDER)
		{
			string api_kind = FileNode::KIND_FILE;
			if (item_old.kind == NavigatorItem::KIND_FOLDER) api_kind = FileNode::KIND_FOLDER;
			
			/* Signal out */
			this.signalOut( 
				new NavigatorItemEvent
				{ 
					"kind": NavigatorItemEvent::KIND_RENAME_START,
					"item_old": item_old,
					"item_new": item_new,
					"path": path,
					"path_str": path_str,
					"old_name": old_name,
					"new_name": new_name,
				} 
			);
			
			ApiResult res = await ApiRequest::callApi(
				this.model.api_class_name,
				"Core.FileSystem.FileTransferInterface",
				"renameNode",
				{
					"path": path_str,
					"kind": api_kind,
					"old_name": old_name,
					"new_name": new_name,
				}
			);
			
			/* Signal out */
			this.signalOut( 
				new NavigatorItemEvent
				{ 
					"kind": NavigatorItemEvent::KIND_RENAME_END,
					"item_old": item_old,
					"item_new": item_new,
					"path": path,
					"path_str": path_str,
					"old_name": old_name,
					"new_name": new_name,
					"res": res,
				} 
			);
			
			
		}
		
	}
	
	
	
	/**
	 * Event reload node
	 */
	public async void reloadNode(Collection<int> path)
	{
		NavigatorItem item = TreeModel::getTreeItem(this.model, path);
		
		/* Reload folder */
		if (item.kind == NavigatorItem::KIND_FOLDER)
		{
			/* Set is reload */
			item <= is_reload <= true;
			this.setModel( TreeModel::setTreeItem(this.model, path, item) );
			
			/* Signal out */
			this.signalOut( 
				new NavigatorItemEvent
				{ 
					"kind": NavigatorItemEvent::KIND_RELOAD_START,
					"item": item,
					"path": path,
				} 
			);
			
			/* Get folder path */
			string path_str = "/" ~ TreeModel::getNamePath(this.model, path);
			
			/* Call api */
			ApiResult res = await ApiRequest::callApi(
				this.model.api_class_name,
				"Core.FileSystem.FileTransferInterface",
				"getDirectoryListing",
				{
					"path": path_str,
				}
			);
			
			/* Set items */
			NavigatorItem item = TreeModel::getTreeItem(this.model, path);
			
			if (res.code == 1)
			{
				/* Update item */
				NavigatorModel model = this.model;
				NavigatorItem item = TreeModel::getTreeItem(model, path);
				item = item.copy({
					"items": NavigatorItem::convertFileNodes(res.result),
					"is_open": true,
					"is_reload": false,
				});
			}
			else
			{
				item <= is_reload <= false;
			}
			
			/* Update model */
			this.setModel( TreeModel::setTreeItem(this.model, path, item) );
			
			/* Signal out */
			this.signalOut( 
				new NavigatorItemEvent
				{ 
					"kind": NavigatorItemEvent::KIND_RELOAD_END,
					"item": item,
					"path": path,
					"res": res,
				} 
			);
		}
		
		
		/* Reload file */
		else if (item.kind == NavigatorItem::KIND_FILE)
		{
			/* Set is reload true */
			item <= is_reload <= true;
			this.setModel( TreeModel::setTreeItem(this.model, path, item) );
			
			/* Signal out */
			this.signalOut( 
				new NavigatorItemEvent
				{ 
					"kind": NavigatorItemEvent::KIND_RELOAD_START,
					"item": item,
					"path": path,
				} 
			);
			
			/* Get folder path */
			string path_str = "/" ~ TreeModel::getNamePath(this.model, path);
			int offset = 0;
			int filesize = -1;
			Vector<byte> content = new Vector();
			
			/* Load file content */
			while (filesize == -1 or offset < filesize)
			{
				ApiResult res = await ApiRequest::callApi(
					this.model.api_class_name,
					"Core.FileSystem.FileTransferInterface",
					"readBlock",
					{
						"path": path_str,
						"offset": offset,
					}
				);
				
				if (res.code != 1) break;
				
				offset += res.result.count;
				filesize = res.result.size;
				content.appendVector(res.result.bytes);
				
				if (res.result.eof) break;
			}
			
			/* Set is reload false */
			NavigatorItem item = TreeModel::getTreeItem(this.model, path);
			item <= is_reload <= false;
			this.setModel( TreeModel::setTreeItem(this.model, path, item) );
			
			/* Signal out */
			this.signalOut( 
				new NavigatorItemEvent
				{ 
					"kind": NavigatorItemEvent::KIND_RELOAD_END,
					"item": item,
					"path": path,
					"content": content.toCollection()
				} 
			);
		}
		
	}	
	
	
}