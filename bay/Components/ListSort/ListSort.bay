/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.ListSort;

use Core.UI.Render.CoreView;
use Core.UI.Render.RenderHelper;
use Runtime.RuntimeUtils;


struct ListSort extends CoreView
{
	
	
	/**
	 * Returns module name
	 */
	lambda string moduleName() => "Core.Components.ListSort";
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%input{
				width: 200px;
				padding: 5px 10px;
			}
		}
	;
	
	
	
	/**
	 * Render items
	 */
	lambda Collection<UIStruct> items(ListSortModel data)
	{
		Vector<UIStruct> res = new Vector();
		for (int i=0; i<data.items.count(); i++)
		{
			mixed item = data.items.item(i);
			mixed children = null;
			if (data.callback != null)
			{
				children = rtl::f(data.callback) (item, i);
				children = rtl::normalizeUIVector(children);
			}
			res.push(
				new UIStruct{
					"space": RuntimeUtils::getCssHash(classof ListSort),
					"class_name": static::getCurrentClassName(), 
					"kind": "element",
					"name": "div",
					"props": {
						"@class": "list_sort_item",
					},
					"children": children,
				}
			);
		}
		return res.toCollection();
	}
	
	
	
	/**
	 * Component render
	 */
	lambda Template render(ListSortModel model, UIStruct ui) =>
		
		<div @class='list_sort' @key={ ui.key }>
			{ static::items(model) }
		</div>
		
	;
	
	
}
