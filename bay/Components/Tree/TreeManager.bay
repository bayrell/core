/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Tree;

use Core.UI.UIController;
use Core.UI.Annotations.BindModel;
use Core.UI.Annotations.BindValue;
use Core.UI.Annotations.Event;
use Core.UI.Annotations.EventAsync;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Events.MouseEvent.MouseContextMenuEvent;
use Core.UI.Events.MouseEvent.MouseDoubleClickEvent;
use Core.UI.Events.UserEvent.ChangeEvent;
use Core.UI.Render.CoreManager;
use Core.Components.Dialog.DialogModel;
use Core.Components.Dialog.DialogResultEvent;
use Core.Components.ContextMenu.ContextMenuItemClickEvent;
use Core.Components.Tree.TreeDialogModel;
use Core.Components.Tree.TreeItem;
use Core.Components.Tree.TreeModel;
use Core.Components.Tree.TreeReloadNodeEvent;
use Core.Components.Tree.TreeSelectNodeEvent;


class TreeManager extends CoreManager
{
	public TreeModel model;
	
	
	
	/**
	 * Event select node
	 */
	public async void selectNode(Collection<int> path)
	{
		
	}
	
	
	
	/**
	 * Event reload node
	 */
	public async void reloadNode(Collection<int> path)
	{
		
	}
	
	
	
	/**
	 * Event create node
	 */
	public async void createNode(Collection<int> path, int pos, TreeItem item)
	{
		
	}
	
	
	
	/**
	 * Event rename node
	 */
	public async void renameNode(Collection<int> path)
	{
		
	}
	
	
	
	/**
	 * Event delete node
	 */
	public async void deleteNode(Collection<int> path)
	{
		
	}
	
	
	
	/**
	 * Push item to collection
	 */
	public Collection<TreeItem> pushItemToCollection(Collection<TreeItem> items, TreeItem item)
	{
		return items.pushIm(item);
	}
	
	
	
	/**
	 * Create new item
	 */
	public TreeItem newItem(Dict map)
	{
		return new TreeItem(map);
	}
	
	
	
	/**
	 * Create item by dialog result
	 */
	public TreeItem createNewItemByDialogResult(DialogResultEvent result)
	{
		string name = result.input;
		string kind = "";
		TreeDialogModel model = result.model;
		
		if (model instanceof TreeDialogModel)
		{
			if (model.kind == TreeDialogModel::KIND_CREATE_FILE) kind = TreeItem::KIND_FILE;
			else if (model.kind == TreeDialogModel::KIND_CREATE_FOLDER) kind = TreeItem::KIND_FOLDER;
			
			TreeItem item = this.newItem({
				"name": name,
				"kind": kind,
			});
			
			return item;
		}
		
		return null;
	}
	
	
	
	@Event{ 
		"event": classof MouseClickEvent, 
		"method_name": "onTreeItemLabelClick", 
		"preventDefault": true, 
	}
	@Event{ 
		"event": classof MouseContextMenuEvent, 
		"method_name": "onTreeItemLabelContextMenu", 
		"cancel": true, 
	}
	@Event{ 
		"event": classof MouseDoubleClickEvent, 
		"method_name": "onTreeItemLabelDoubleClick", 
		"preventDefault": true, 
	}
	public assignable UIController tree_item_label = new UIController();
	
	
	
	/**
	 * Event item click
	 */
	public void onTreeItemLabelClick(MouseClickEvent event)
	{
		/* Set new value */
		string tree_data_path = event.ui.props.get("data-path");
		this.updateModel({
			"selected": tree_data_path,
		});
		
		Collection<int> path = TreeModel::splitPath( tree_data_path );
		this.signalOut( new TreeSelectNodeEvent{ "path": path } );
		
		/* Call await method */
		callback f = rtl::methodAwait(this, "selectNode");
		f(path);
	}
	
	
	
	/**
	 * Event item click
	 */
	public void onTreeItemLabelContextMenu(MouseContextMenuEvent event)
	{
		/* Set new value */
		string tree_data_path = event.ui.props.get("data-path");
		
		Model model = this.model;
		
		model = TreeModel::showContextMenu(model, true, event.layerX, event.layerY);
		model = TreeModel::selectItem(model, tree_data_path);
		
		this.setModel(model);
	}
	
	
	
	/**
	 * Event item double click
	 */
	public void onTreeItemLabelDoubleClick(MouseClickEvent event)
	{
		string tree_data_path = event.ui.props.get("data-path");
		Collection<int> path = TreeModel::splitPath( tree_data_path );
		this.signalOut( new TreeReloadNodeEvent{ "path": path } );
		
		/* Call await method */
		callback f = rtl::methodAwait(this, "reloadNode");
		f(path);
	}
	
	
	
	@BindModel{ "model": "dialog" }
	@Event{ 
		"event": classof DialogResultEvent, 
		"method_name": "onDialogResult", 
	}
	public assignable UIController dialog = new UIController();
	
	
	
	/**
	 * Dialog create result
	 */
	public void onDialogResult(DialogResultEvent result)
	{
		if (result.value == DialogModel::BUTTON_RESULT_OK)
		{
			
			/* Create file or folder */
			if (
				result.model.kind == TreeDialogModel::KIND_CREATE_FILE or
				result.model.kind == TreeDialogModel::KIND_CREATE_FOLDER
			)
			{
				Collection<int> path = result.model.path;
				TreeItem item = this.createNewItemByDialogResult(result);
				if (item != null)
				{
					TreeModel model = TreeModel::addTreeItem
					(
						this.model,
						path,
						item,
						method this.pushItemToCollection
					);
					this.setModel( model );
					
					/* return created pos item */
					TreeItem p = TreeModel::getTreeItem(this.model, path);
					int pos = p.items.indexOf(item);
					
					/* Call await method */
					callback f = rtl::methodAwait(this, "createNode");
					f(path, pos, item);
				}
			}
			
			
			/* Rename node */
			if (result.model.kind == TreeDialogModel::KIND_RENAME_NODE)
			{
				TreeItem item = TreeModel::getTreeItem(this.model, result.model.path);
				if (item != null)
				{
					TreeItem item_old = item;
					item <= name <= result.input;
					TreeModel model = TreeModel::setTreeItem
					(
						this.model,
						result.model.path,
						item
					);
					this.setModel( model );
					
					/* Call await method */
					callback f = rtl::methodAwait(this, "renameNode");
					f(result.model.path, item_old, item);
				}
			}
			
			
			/* Remove node */
			if (result.model.kind == TreeDialogModel::KIND_DELETE_NODE)
			{
				TreeItem item = TreeModel::getTreeItem(this.model, result.model.path);
				TreeModel model = TreeModel::deleteTreeItem
				(
					this.model,
					result.model.path
				);
				this.setModel( model );
				
				/* Call await method */
				callback f = rtl::methodAwait(this, "deleteNode");
				f(path, item);
			}
		}
	}
	
	
	
	@Event{ 
		"event": classof ContextMenuItemClickEvent, 
		"method_name": "onContextMenuClick", 
		"cancel": true 
	}
	public assignable UIController contextmenu = new UIController();
	
	
	
	/**
	 * Navigation menu item click
	 */
	public void onContextMenuClick(ContextMenuItemClickEvent e)
	{
		
		/* Hide context menu */
		Model model = this.model;
		model = TreeModel::showContextMenu(model, false);
		this.setModel(model);
		
		
		Collection<int> path = TreeModel::splitPath( this.model.selected );
		if (e.tag == 'create_file')
		{
			static::showCreateFile(path);
		}
		else if (e.tag == 'create_folder')
		{
			static::showCreateFolder(path);
		}
		else if (e.tag == 'rename_node')
		{
			static::showRenameNode(path);
		}
		else if (e.tag == 'delete_node')
		{
			static::showDeleteNode(path);
		}
	}
	
	
	
	/**
	 * Create new file
	 */
	public void showCreateFile(Collection<int> path)
	{
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		string path_str = "/" ~ TreeModel::getNamePath(this.model, path);
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			TreeDialogModel dialog = new TreeDialogModel
			{
				"is_open": true,
				"is_modal": true,
				"input": "",
				"style": DialogModel::STYLE_PROMT,
				"kind": TreeDialogModel::KIND_CREATE_FILE,
				"path": path,
				"path_str": path_str,
				"title": "",
				"message": "Create file in " ~ path_str,
			};
			this.updateModel(
			{
				"dialog": dialog,
			});
		}
		else
		{
			this.updateModel(
			{
				"alert": new DialogModel{
					"title": "Warning",
					"message": "File must be folder",
				}
			});
		}
		
	}
	
	
	
	/**
	 * Create new folder
	 */
	public void showCreateFolder(Collection<int> path)
	{
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		string path_str = "/" ~ TreeModel::getNamePath(this.model, path);
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			this.updateModel(
			{
				"dialog": new TreeDialogModel{
					"is_open": true,
					"is_modal": true,
					"input": "",
					"style": DialogModel::STYLE_PROMT,
					"kind": TreeDialogModel::KIND_CREATE_FOLDER,
					"path": path,
					"path_str": path_str,
					"title": "",
					"message": "Create folder in " ~ path_str,
				}
			});
		}
		else
		{
			this.updateModel(
			{
				"alert": new DialogModel{
					"title": "Warning",
					"message": "File must be folder",
				}
			});
		}
	}
	
	
	
	/**
	 * Rename node
	 */
	public void showRenameNode(Collection<int> path)
	{
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		string path_str = "/" ~ TreeModel::getNamePath(this.model, path);
		string title = "";
		
		if (item == null)
		{
			return;
		}
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			title = "Rename folder " ~ path_str;
		}
		else if (item.kind == TreeItem::KIND_FILE)
		{
			title = "Rename file " ~ path_str;
		}
		
		if (title)
		{
			this.updateModel(
			{
				"dialog": new TreeDialogModel{
					"is_open": true,
					"is_modal": true,
					"input": item.name,
					"style": DialogModel::STYLE_PROMT,
					"kind": TreeDialogModel::KIND_RENAME_NODE,
					"path": path,
					"path_str": path_str,
					"title": "",
					"message": title,
				}
			});
		}
		
	}
	
	
	
	/**
	 * Delete node
	 */
	public void showDeleteNode(Collection<int> path)
	{
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		string path_str = "/" ~ TreeModel::getNamePath(this.model, path);
		string title = "";
		
		if (item == null)
		{
			return;
		}
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			title = "Delete folder " ~ path_str ~ "?";
		}
		else if (item.kind == TreeItem::KIND_FILE)
		{
			title = "Delete file " ~ path_str ~ "?";
		}
		
		if (title)
		{
			this.updateModel(
			{
				"dialog": new TreeDialogModel{
					"is_open": true,
					"is_modal": true,
					"input": item.name,
					"style": DialogModel::STYLE_CONFIRM,
					"kind": TreeDialogModel::KIND_DELETE_NODE,
					"path": path,
					"path_str": path_str,
					"title": "",
					"message": title,
				}
			});
		}
		
	}
	
	
	
}