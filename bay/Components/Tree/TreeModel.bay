/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Tree;

use Runtime.CoreStruct;
use Core.Components.ContextMenu.ContextMenuModel;
use Core.Components.Tree.DialogCreateModel;
use Core.Components.Tree.DialogDeleteModel;
use Core.Components.Tree.TreeItem;


struct TreeModel extends TreeItem
{
	
	public string selected = "";
	public DialogModel dialog_create = new DialogCreateModel();
	public DialogModel dialog_delete = new DialogDeleteModel();
	public ContextMenuModel contextmenu = new ContextMenuModel();
	public Collection<TreeItem> items = null;
	
	
	
	/**
	 * Split path
	 */
	pure Collection<int> splitPath(string path)
	{
		Collection<string> path = rs::explode(".", path);
		return path.map( method rtl::toInt );
	}
	
	
	
	/**
	 * Return name path
	 */
	pure Collection<int> getNamePath(TreeModel model, Collection<int> path, string ch = "/", string attr = "name")
	{
		Collection<TreeItem> items = static::getTreePathItems(model, path);
		string path_str = rs::implode(ch, items.map( lambda string (TreeItem item) use (attr) => item.takeValue(attr) ));
		return path_str;
	}
	
	
	
	/**
	 * Returns tree items by path
	 */
	pure Collection<TreeItem> getTreePathItems(TreeModel model, Collection<int> path)
	{
		TreeItem item = model;
		Vector<TreeItem> items = new Vector();
		for (int i=0; i<path.count(); i++)
		{
			int key = path.item(i);
			TreeItem item = item.items.get(key, null);
			if (item == null) return null;
			items.push(item);
		}
		
		return items.toCollection();
	}
	
	
	
	/**
	 * Returns tree item by path
	 */
	pure TreeItem getTreeItem(TreeModel model, Collection<int> path)
	{
		TreeItem item = model;
		for (int i=0; i<path.count(); i++)
		{
			int key = path.item(i);
			TreeItem item = item.items.get(key, null);
			if (item == null) return null;
		}
		
		return item;
	}
	
	
	
	/**
	 * Set tree item by path
	 */
	pure TreeItem setTreeItem(TreeItem parent_item, Collection<int> path, TreeItem item)
	{
		if (path.count() == 1)
		{
			parent_item <= items <= parent_item.items.setIm(path.get(0), item);
			return parent_item;
		}
		
		int key = path.get(0);
		parent_item <= items <= parent_item.items.setIm(
			key, 
			static::setTreeItem(
				parent_item.items.get(key), 
				path.removeFirstIm(), 
				item
			)
		);
		return parent_item;
	}
	
	
	
	/**
	 * Show navigator context menu
	 * @param TreeModel model
	 * @param bool is_active
	 * @param int x
	 * @param int y
	 * @return TreeModel
	 */
	pure TreeModel showContextMenu(TreeModel model, bool is_active, int x = 0, int y = 0)
	{
		ContextMenuModel contextmenu = model.contextmenu;
		
		if (is_active)
		{
			contextmenu = contextmenu.copy({
				"is_active": is_active,
				"x": x,
				"y": y,
			});
		}
		else
		{
			contextmenu = contextmenu.copy({
				"is_active": is_active,
			});
		}
		
		model <= contextmenu <= contextmenu;
		return model;
	}
	
	
	
	/**
	 * Show navigator context menu
	 * @param TreeModel model
	 * @param string path
	 * @return TreeModel
	 */
	pure TreeModel selectItem(TreeModel model, string path)
	{
		model <= selected <= path;
		return model;
	}
	
	
	
	/**
	 * Show navigator context menu
	 * @param TreeModel model
	 * @return TreeItem
	 */
	pure TreeItem getSelectedItem(TreeModel model)
	{
		Collection<int> path = static::splitPath( model.selected );
		TreeItem item = static::getTreeItem( model, path );
		return item;
	}
	
}