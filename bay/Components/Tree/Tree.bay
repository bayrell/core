/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Tree;

use Runtime.RuntimeUtils;
use Core.UI.Render.CoreView;
use Core.UI.Render.RenderHelper;
use Core.Components.ContextMenu.ContextMenu;
use Core.Components.Dialog.Dialog;
use Core.Components.Tree.TreeAssets;
use Core.Components.Tree.TreeItem;
use Core.Components.Tree.TreeManager;
use Core.Components.Tree.TreeModel;


class Tree extends CoreView
{
	
	/**
	 * Returns module name
	 */
	lambda string moduleName() => "Core.Components.Tree";
	
	
	
	/**
	 * Required Assets
	 */
	lambda Collection<string> assets() =>
		[
			classof TreeAssets,
		]
	;
	
	
	
	/**
	 * Required components
	 */
	lambda Collection<string> components() =>
		[
			classof ContextMenu,
			classof Dialog,
		]
	;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%tree_item > %tree_items{
				padding-left: 10px;
			}
			%tree_icon, %tree_label{
				display: inline-block;
				vertical-align: middle;
				-webkit-user-select: none;
				-moz-user-select: none;
				-khtml-user-select: none;
				-ms-user-select: none;
			}
			%tree_icon{
				width: 22px;
				height: 22px;
				font-size: 20px;
			}
			%tree_label{
				cursor: pointer;
				padding: 2px;
			}
			%tree_label:hover{
				background-color: #eaeaea;
			}
			%tree_item.active > %tree_item_name > %tree_label{
				background-color: blue;
				color: white;
			}
			%tree_item.reload > %tree_item_name > %tree_label{
				background-color: gray;
				color: white;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda Template render(TreeModel model, UIStruct ui) =>
		rtl::normalizeUIVector([
			static::renderTree(model, ui),
			static::renderContextMenu(model),
			static::renderDialogs(model),
		])
	;
	
	
	
	/**
	 * Component render
	 */
	lambda Template renderTree(TreeModel model, UIStruct ui) =>
		
		<div @class='tree'>
			{ static::renderTreeItems(model, model.items, "", ui.props) }
		</div>
		
	;
	
	
	
	/**
	 * Tree render items
	 */
	lambda Collection<UIStruct> renderTreeItems
	(
		TreeModel model, 
		Collection<TreeItem> items, 
		string path, 
		Dict<primitive> props
	) =>
	
		(items != null) ? 
			items.map( 
				lambda Collection<UIStruct> (TreeItem item, int index) use (model, path, props) => 
					static::renderTreeItem(
						model, 
						item, 
						(path !== "") ? path ~ "." ~ index : rtl::toString(index), 
						props
					)
			) 
		: ""
		
	;
	
	
	
	/**
	 * Tree render item
	 */
	lambda Template renderTreeItem(TreeModel model, TreeItem item, string path, Dict<primitive> props)
	{
		string class_name = "";
		
		if (model.selected === path) class_name ~= "active ";
		if (item.is_reload) class_name ~= "reload ";
		
		return 
			<div @class='tree_item' class={ class_name }>
				<div @class='tree_item_name'>
					<div @class='tree_icon'>{ static::renderTreeIcon(model, item, props) }</div>
					<div @class='tree_label' data-path={ path } @control="tree_item_label">{ item.name }</div>
				</div>
				<div @class='tree_items'>
					{ item.is_open ? static::renderTreeItems(model, item.items, path, props) : "" }
				</div>
			</div>
		;
	}
	
	
	
	/**
	 * Tree render icon
	 */
	lambda Collection<UIStruct> renderTreeIcon(TreeModel model, TreeItem item, Dict<primitive> props)
	{
		return <span class={ static::getTreeIcon(item) }></span>;
	}
	
	
	
	/**
	 * Returns icon by item
	 */
	lambda string getTreeIcon(TreeItem item)
	{
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			if (item.is_open) return "fa fa-folder-open";
			return "fa fa-folder";
		}
		if (item.kind == TreeItem::KIND_FILE) return "fa fa-file";
		return "";
	}
	
	
	
	/**
	 * Render context menu
	 */
	lambda Collection<UIStruct> renderContextMenu(Model model) =>
		<ContextMenu @model={ model.contextmenu } @key="contextmenu" @control="contextmenu">
			{ static::renderContextMenuItems(model) }
		</ContextMenu>	
	;
	
	
	
	/**
	 * Render context menu items
	 */
	lambda Collection<UIStruct> renderContextMenuItems(Model model)
	{
		if (model.selected == "" or not model.contextmenu.is_active)
			return "";
		
		TreeModel item = TreeModel::getSelectedItem(model);
		if (item.kind == TreeModel::KIND_FOLDER)
		{
			return 
				<ContextMenuItem icon='fa fa-file' @tag='create_file'>Create file</ContextMenuItem>
				<ContextMenuItem icon='fa fa-folder' @tag='create_folder'>Create folder</ContextMenuItem>
				<ContextMenuItem icon='fa fa-pencil' @tag='rename_node'>Rename</ContextMenuItem>
				<ContextMenuItem icon='fa fa-trash' @tag='delete_node'>Delete</ContextMenuItem>
				<ContextMenuItem icon='fa fa-refresh' @tag='reload_node'>Reload</ContextMenuItem>
			;
		}
		else
		{
			return 
				<ContextMenuItem icon='fa fa-pencil' @tag='rename_node'>Rename</ContextMenuItem>
				<ContextMenuItem icon='fa fa-trash' @tag='delete_node'>Delete</ContextMenuItem>
			;
		}
	}
	
	
	
	/**
	 * Render context menu
	 */
	lambda Collection<UIStruct> renderDialogs(Model model)
	{
		return 
			<Dialog @model={ model.dialog } @control='dialog'></Dialog>
		;
	};
	
}
