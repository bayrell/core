/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Dialog;

use Core.UI.UIController;
use Core.UI.Annotations.BindValue;
use Core.UI.Annotations.Event;
use Core.UI.Events.KeyboardEvent.KeyDownEvent;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Events.UserEvent.ChangeEvent;
use Core.UI.Render.CoreManager;
use Core.Components.Dialog.DialogModel;
use Core.Components.Dialog.DialogResultEvent;


class DialogManager extends CoreManager
{
	
	public DialogModel model;
	
	
	@BindValue{ "model": "input" }
	@Event{
		"event": classof KeyDownEvent, 
		"method_name": "onInputKeyDown",
	}
	public assignable UIController input = new UIController();
	
	
	
	/**
	 * Input keydown
	 */
	public void onInputKeyDown(KeyDownEvent event)
	{
		if (event.keyCode == 13)
		{
			this.updateModel({
				"input": event.value,
			});
			this.pressButton(DialogModel::BUTTON_RESULT_OK);
		}
	}
	
	
	
	@Event{
		"event": classof MouseClickEvent, 
		"method_name": "onButtonClick", 
		"cancel": true 
	}
	public assignable UIController button = new UIController();
	
	
	
	/**
	 * Button click
	 */
	public void onButtonClick(MouseClickEvent event)
	{
		string tag = event.ui.props.get("@tag", "");
		this.pressButton(tag);
	}
	
	
	
	/**
	 * Press button
	 * @param string value 
	 */
	public void pressButton(string value)
	{
		this.updateModel({
			"is_open": false,
			"button_result": value,
		});
		this.signalOut( new DialogResultEvent{ "input": this.model.input, "value": value, "model": this.model } );
	}
	
}
