/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Core.Components.Dialog;

use Runtime.Exceptions.RuntimeException;
use Runtime.Interfaces.ContextInterface;
use Runtime.Interfaces.ModuleDescriptionInterface;
use Core.UI.Interfaces.ComponentInterface;
use Core.UI.Render.RenderContainer;


class ModuleDescription implements 
	ModuleDescriptionInterface, 
	ComponentInterface
{
	
	/**
	 * Returns module name
	 * @return string
	 */
	lambda string getName() => "Core.Components.Dialog";
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	lambda string getModuleVersion() => "0.1.2";
	
	
	
	/**
	 * Returns required modules
	 * @return Map<string>
	 */	
	lambda Map<string> requiredModules() =>
	{
		'Core.UI': '>=0.3',
		'Core.Components.Button': '*',
	};
	
	
	
	/**
	 * Returns enities
	 */
	lambda Collection<Dict> entities() => null;
	
	
	
	/**
	 * Returns view name
	 */
	lambda string componentViewName()  => "Core.Components.Dialog.Dialog";
	
	
	
	/**
	 * Returns manager name
	 */
	lambda string componentManagerName() => "Core.Components.Dialog.DialogManager";
	
	
	
	/**
	 * Returns model name
	 */
	lambda string componentModelName()  => "Core.Components.Dialog.DialogModel";
	
	
	
	/**
	 * Returns required assets
	 * @return Collection<string>
	 */	
	lambda Collection<string> assets(RenderContainer container) => null;
	
	
	
	/**
	 * Returns sync loaded files
	 */		
	lambda Vector<string> assetsSyncLoad(RenderContainer container) =>
		[
		]
	;
	
	
	
	/**
	 * Returns async loaded files
	 */			
	lambda Vector<mixed> assetsAsyncLoad(RenderContainer container) =>
		[
			[
				'@Core/Components/Dialog/Dialog.js',
				'@Core/Components/Dialog/DialogManager.js',
				'@Core/Components/Dialog/DialogModel.js',
				'@Core/Components/Dialog/DialogResultEvent.js',
				'@Core/Components/Dialog/ModuleDescription.js',
			]
		]
	;
	
	
	
	/**
	 * Init render container
	 */
	lambda RenderContainer initContainer(RenderContainer container) => container;
	
	
	
	/**
	 * Init context
	 * @param ContextInterface context
	 */
	public static void initContext(ContextInterface context)
	{
	}
	
	
	
	/**
	 * Called then module registed in context
	 * @param ContextInterface context
	 */
	public static void onRegister(ContextInterface context)
	{
	}
	
	
	
	/**
	 * Called then context read config
	 * @param Map<mixed> config
	 */
	public static void onReadConfig(ContextInterface context, Map<mixed> config){}
	
	
}