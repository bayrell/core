/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace RuntimeUI.Events.UserEvent;

use Runtime.CoreEvent;
use Runtime.UIStruct;
use RuntimeUI.Interfaces.ElementInterface;


struct UserEvent extends CoreEvent
{
	public string name = "";
	public bool bubbles = false;
	public bool cancel_bubble = false;
	public bool cancelable = true;
	public bool composed = true;
	public bool default_prevented = false;
	public int event_phase = 0;
	public bool is_trusted = true;
	public UIStruct ui = null;
	public mixed es6_event = null;
	public mixed currentElement = null;
	public mixed target = null;
	
	
	
	
	#switch
	#case ifcode ES6 then
	
	assignEvent(e)
	{
		this.setMap(new Runtime.Dict({
			"name": e.type,
			"currentElement": e.target,
			"target": e.currentTarget,
			"ui": e.currentTarget._ui,
			"bubbles": e.bubbles,
			"cancel_bubble": e.cancel_bubble,
			"cancelable": e.cancelable,
			"composed": e.composed,
			"default_prevented": e.default_prevented,
			"event_phase": e.eventPhase,
			"is_trusted": e.isTrusted,
			"es6_event": e,
		}));
	}
	
	static fromEvent(e)
	{
		var target = e.currentTarget || e.target;
		var doc = target.ownerDocument || target;
		var win = doc.defaultView;
		var obj = null;
		
		if (e.type == "click") obj = new RuntimeUI.Events.MouseEvent.MouseClickEvent();
		else if (e.type == "dblclick") obj = new RuntimeUI.Events.MouseEvent.MouseDoubleClickEvent();
		else if (e.type == "mousedown") obj = new RuntimeUI.Events.MouseEvent.MouseDownEvent();
		else if (e.type == "mouseenter") obj = new RuntimeUI.Events.MouseEvent.MouseEnterEvent();
		else if (e.type == "mouseleave") obj = new RuntimeUI.Events.MouseEvent.MouseLeaveEvent();
		else if (e.type == "mousemove") obj = new RuntimeUI.Events.MouseEvent.MouseMoveEvent();
		else if (e.type == "mouseout") obj = new RuntimeUI.Events.MouseEvent.MouseOutEvent();
		else if (e.type == "mouseover") obj = new RuntimeUI.Events.MouseEvent.MouseOverEvent();
		else if (e.type == "mouseup") obj = new RuntimeUI.Events.MouseEvent.MouseUpEvent();
		else if (e.type == "change") obj = new RuntimeUI.Events.UserEvent.ChangeEvent();
		else if (e.type == "focus") obj = new RuntimeUI.Events.UserEvent.FocusEvent();
		else if (e.type == "blur") obj = new RuntimeUI.Events.UserEvent.BlurEvent();
		
		if (obj == null)
			return null;
			
		obj.assignEvent(e);
		return obj;
	}
	
	#endswitch
	
	
	/**
	 * Prevent default mouse event
	 */
	void preventDefault()
	{
		
		this.defaultPrevented = true;
		
		#switch
		#case ifcode ES6 then
		this.es6_event.preventDefault();
		#endswitch
	}

	
	
	/**
	 * Cancel event
	 */
	void isCancel()
	{
		return this.cancelBubble;
	}
	
	
	
	/**
	 * Cancel event
	 */
	void cancel()
	{
		#switch
		#case ifcode ES6 then
		this.es6_event.cancelBubble = true;
		this.es6_event.stopPropagation();
		#endswitch
	}
}