/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Core.Backend;

use Runtime.Exceptions.RuntimeException;
use Runtime.Interfaces.AssetsInterface;
use Runtime.Interfaces.ContextInterface;
use Runtime.Interfaces.ModuleDescriptionInterface;
use Core.Backend.ApiRoute;
use Core.Backend.BackendAppDriver;
use Core.UI.Interfaces.RoutesDeclaringInterface;


class ModuleDescription implements ModuleDescriptionInterface, RoutesDeclaringInterface
{

	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getName() => "Core.Backend";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.1.2";
	
	
	
	/**
	 * Returns required modules
	 * @return Map<string, string>
	 */
	pure Map<string> requiredModules() =>
	{
		'Runtime': '>=0.3',
	};
	
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() => null;
	
	
	
	/**
	 * Init context
	 * @param ContextInterface context
	 */
	public static void initContext(ContextInterface context)
	{
		Map config = context.getDriver("runtime.config");
		config.set("app.session.csrf_token_name", "csrf_token");
		config.set("app.session.csrf_token_expire", 54000);
		config.set("app.session.auth_token_name", "auth_token");
		config.set("app.session.auth_token_expire", 31536000);
		config.set("app.session.token_secret_key", "TheSecretKey!");
		
		BackendAppDriver driver = context.getDriver("Backend.App");
		driver.initDriver();
	}
	
	
	
	/**
	 * Called then module registed in context
	 * @param ContextInterface context
	 */
	public static void onRegister(ContextInterface context)
	{
		context.registerDriver("Backend.App", new BackendAppDriver(context));
	}
	
	
	
	/**
	 * Called then context read config
	 * @param Map<mixed> config
	 */
	public static void onReadConfig(ContextInterface context, Map<mixed> config){}
	
}