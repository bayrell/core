/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Core.Backend;

use Runtime.CoreObject;
use Runtime.RuntimeConstant;
use Runtime.RuntimeUtils;
use Runtime.Interfaces.ContextInterface;
use Core.Backend.AppProvider;
use Core.Backend.BaseRoute;
use Core.Http.ApiRequest;
use Core.Http.ApiResult;
use Core.Http.JsonResponse;
use Core.Http.Response;
use Core.UI.Annotations.RouteInfo;
use Core.UI.Interfaces.RouteInterface;
use Core.UI.Render.CoreRoute;
use Core.UI.Render.WebContainer;


class ApiRoute extends CoreRoute
{
	
	
	/**
	 * Index Action
	 * @return Response
	 */
	@RouteInfo{ 
		"uri": "/api/{class_name}/{method_name}/", 
		"name": "api:class" 
	} 
	public async static WebContainer IndexAction(WebContainer container, ContextInterface context)
	{
		Request request = container.request;
		AppProvider app = context.getValue('default.app');
		
		/* Check if POST request */
		if (request.method != "POST")
		{
			return ApiResult::setError(new ApiResult(), RuntimeConstant::ERROR_REQUEST, "Request must be POST");
		}
		
		string class_name = container.params.get("class_name", "", "string");
		string interface_name = "";
		string method_name = container.params.get("method_name", "", "string");
		Collection<string> arr = rs::explode(".", method_name);
		method_name = arr.pop();
		interface_name = rs::implode(".", arr);
		
		string json = request.payload.get("DATA", null);
		Dict data = RuntimeUtils::json_decode(json);
		
		ApiResult res = await app.callApi(class_name, interface_name, method_name, data, context);
		if (not(res instanceof ApiResult))
		{
			return ApiResult::setError(
				new ApiResult(),
				RuntimeConstant::ERROR_RUNTIME, 
				"The result of the api request must be ApiResult"
			);
		}
		
		/* Create Response*/
		Response response = new JsonResponse();
		response <= data <= res.takeMap();
		
		/* Set response */
		container <= response <= response;
		
		return container;
	}
	
}