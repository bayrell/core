/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Core.FileSystem;


interface FileSystemInterface
{
	
	
	/**
	 * Returns files and folders from directory
	 * @param string basedir
	 * @return Vector<string> - Result
	 */
	public Vector<string> getDirectoryListing(string basedir="");
	
	
	
	/**
	 * Returns recursive files and folders from directory
	 * @param string basedir
	 * @return Vector<string> - Result
	 */
	public Vector<string> readDirectoryRecursive(string basedir="");
	
	
	
	/**
	 * Returns recursive only files from directory
	 * @param string basedir
	 * @return Vector<string> - Result
	 */
	public Vector<string> getFilesRecursive(string basedir="");

	
	
	/**
	 * Returns content of the file
	 * @param string filepath
	 * @param string charset
	 * @return string
	 */
	public string readFile(string filepath="", string charset="utf8");
	
	
	
	/**
	 * Save file content
	 * @param string filepath
	 * @param string content
	 * @param string charset
	 */
	public void saveFile(string filepath="", string content="", string charset="utf8");
	
	
	
	/**
	 * Open file
	 * @param string filepath
	 * @param string mode
	 * @return FileInterface
	 */
	public FileInterface openFile(string filepath="", string mode="");
	
	
	
	/**
	 * Make dir
	 * @param string dirpath
	 * @param boolean create_parent. Default is true
	 */
	public void makeDir(string dirpath="", bool create_parent=false);
	
	
	
	/**
	 * Return true if path is folder
	 * @param string path
	 * @param boolean 
	 */
	public void isDir(string path);
	
	
	
	/**
	 * Read string from file
	 * @param string filepath
	 * @param int offset
	 * @param int count
	 * @return FileIOResult
	 */
	public async FileIOResult readBlock(string filepath, int offset, int count = -1);
	
} 