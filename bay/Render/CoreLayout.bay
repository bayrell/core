/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace RuntimeUI.Render;


use Runtime.CoreStruct;
use RuntimeUI.Assets;
use RuntimeUI.Render.CoreLayoutModel;
use RuntimeUI.Render.CoreView;
use RuntimeUI.Render.RenderHelper;


struct CoreLayout extends CoreView
{
	
	/**
	 * Required Assets
	 */
	lambda Collection<string> assets() =>
		[
			classof Assets,
		]
	;
	
	
	
	/**
	 * Required components
	 */
	lambda Collection<string> components() =>
		[
			
			
		]
	;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => "";
	
	
	
	/**
	 * Render head
	 */
	lambda Template head(CoreLayoutModel data) =>
		return 
			<meta name='Content-Type' content='text/html; charset=utf-8'/>
			<title>{ data.title }</title>
		;
	
	
	
	/**
	 * Render assets in header
	 */
	pure Template assetsHeader(CoreLayoutModel data)
	{
		string css = RenderHelper::getCSSFromComponents(data.components, data.css_vars);
		return new UIStruct{
			"kind": UIStruct::TYPE_ELEMENT,
			"name": "style",
			"props": {
				"type": "text/css",
			},
			"children": [
				rtl::normalizeUI(css),
			],
		};
	}
	
	
	
	/**
	 * Render assets in body
	 */
	pure Template assetsBody(CoreLayoutModel data)
	{
		Collection<string> js = RenderHelper::loadAsyncResources(data.assets);
		Vector<UIStruct> res = new Vector();
		for (int i=0; i<js.count(); i++)
		{
			res.push(new UIStruct{
				"kind": UIStruct::TYPE_ELEMENT,
				"name": "script",
				"props": {
					"src": js.item(i),
				},
			});
		}
		return res.toCollection();
	}
	
	
	
	/**
	 * Content render
	 */
	lambda Template content(CoreLayoutModel data) => return data.content;
	
	
	
	/**
	 * Component render
	 */
	lambda Template render(CoreLayoutModel data) =>
		return <!DOCTYPE html>
			<html>
			<head>
				{ static::head( data ) }
				{ static::assetsHeader( data ) }
			</head>
			<body>
				<div id='root'>@raw{ static::content( data ) }</div>
				<div id='scripts'>
					{ static::assetsBody( data ) }
				</div>
			</body>
		</html>;
		
	;
	
}