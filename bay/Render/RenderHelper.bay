/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace RuntimeUI.Render;

use Runtime.CoreStruct;
use Runtime.Interfaces.StringInterface;
use RuntimeUI.Render.RenderContainer;


static class RenderHelper 
{
	
	
	/**
	 * Render class with data
	 */
	pure string render
	(
		string class_name, 
		mixed data
	)
	{
		UIStruct st = null;
		
		if (data instanceof CoreStruct)
		{
			UIStruct st = new UIStruct{
				"name": class_name,
				"kind": UIStruct::TYPE_COMPONENT,
				"model": data,
			};
		}
		else
		{
			UIStruct st = new UIStruct{
				"name": class_name,
				"kind": UIStruct::TYPE_COMPONENT,
				"props": data,
			};
		}
		
		return RenderHelper::getUIString(st);
	}
	
	
	
	/**
	 * Returns if tag name is double token
	 */
	pure memorize bool isDoubleToken(string tag_name)
	{
		Dict tokens = ["img", "meta", "input", "link", "br"];
		if (tokens.indexOf(tag_name) == -1)  return true;
		return false;
	}
	
	
	
	/**
	 * Retuns css hash 
	 * @param string component class name
	 * @return string hash
	 */
	static memorize string getCssHash(string s)
	{
		int sz = rs::strlen(s);
		int h = 0;
		for (int i=0; i<sz; i++){
			int ch = rs::ord(s[i]);
			h = ((h << 2) + (h >> 14) + ch) & 65535;
		}
		
		string arr = "1234567890abcdef";
		string res = "";
		while (h != 0){
			int c = h & 15;
			h = h >> 4;
			res ~= arr[c];
		}
		
		return res;
	}
	
	
	
	
	/**
	 * Returns attrs
	 */
	pure Dict<string> getUIAttrs(UIStruct st)
	{
		Dict<string> attrs = new Map();
		
		if (st == null)
			return attrs.toDict();
		
		if (st.props == null)
			return attrs.toDict();
		
		Dict<string> props = UIStruct::getAttrs(st);
		
		Vector keys = props.keys();
		for (int ki=0; ki<keys.count(); ki++)
		{
			string key = keys.item(ki);
			mixed item = props.item(key);
			string value = "";
			
			if (rs::strlen(key) == 0)
				continue;
			
			
			if (key == 'style' and item instanceof Map)
			{
				value = item.reduce(
					string (string res, string key, string value){
						return res ~ key ~ ':' ~ value ~ ';' ;
					}, 
					""
				);
			}
			else if (item implements StringInterface)
			{
				value = rtl::toString(item);
			}
			else if (rtl::isString(item))
			{
				value = rtl::toString(item);
			}
			
			if (key == "@class")
			{
				Map css_arr = rs::explode(" ", value);
				css_arr = css_arr.map
				(
					string (string item) use (st)
					{
						return item ~ "-" ~ static::getCssHash(st.class_name);
					}
				);
				key = "class";
				value = rs::implode(" ", css_arr);
			}
			else if (key[0] == "@")
			{
				continue;
			}
			else if (key == 'dangerouslySetInnerHTML')
			{
				continue;
			}
			
			else if (key == 'defaultValue') key = 'value';
			else if (key == 'className') key = 'class';
			else if (key == 'selected') {
				if (item == true) value = 'selected';
				else if (item == false) return;
				value = 'selected';
			}
			else if (key == 'checked') {
				if (item == true) value = 'checked';
				else if (item == false) return;
				value = 'checked';
			}
			
			if (value != "")
			{
				if (attrs.has(key))
				{
					value = attr.item(key) ~ " " ~ value;
				}
				attrs.set(key, value);
			}
		}
		
		return attrs;
	}
	
	
	
	/**
	 * Returns attrs
	 */
	pure string getUIStringAttrs(UIStruct st)
	{
		Dict<string> attrs = static::getUIAttrs(st);
		attrs = attrs.map(
			string (string key, string value)
			{
				return key ~ "='" ~ value ~ "'";
			}
		);
		
		return rs::implode(" ", attrs.values());
	}
	
	
	
	/**
	 * Convert UI to string
	 */
	pure string getUIStringVector(Collection<UIStruct> arr)
	{
		if (arr == null) 
			return "";
			
		string content = "";
		for (int i=0; i<arr.count(); i++)
		{
			content ~= static::getUIString( arr.item(i) );
		}
		return content;
	}
	
	
	
	/**
	 * Convert UI to string
	 */
	pure string getUIString(UIStruct st)
	{
		if (st == null)
			return "";
		
		
		if (UIStruct::isString(st))
		{
			return st.content;
		}
		
		if (UIStruct::isComponent(st))
		{
			fun render = method (st.name, "render");
			Collection<UIStruct> res = render( UIStruct::getModel(st) );
			
			return static::getUIStringVector( res, st.name );
		}
		
		string attrs = static::getUIStringAttrs( st );
		string content = "";
		if ( static::isDoubleToken(st.name) )
		{
			content = "<"~st.name ~ (attrs!="" ? " " ~ attrs : "") ~ ">";
			content ~= static::getUIStringVector( st.children );
			content ~= "</"~st.name~">";
			
			/*
			if (element.props and element.props.has("dangerouslySetInnerHTML"))
			{
				content ~= element.props.item("dangerouslySetInnerHTML");
			}
			else
			{
				content ~= static::getUIStringVector( st.children, class_name );
			}
			*/
			
		}
		else
		{
			content = "<"~st.name ~ (attrs!="" ? " " ~ attrs : "") ~ "/>";
		}
		
		
		return content;
	}
	
	
	
	/**
	 * Add unique items to collection
	 * @param Collection<string> res
	 * @param Collection<string> items
	 * @return Collection<string>
	 */
	pure Collection<string> addUniqueItems
	(
		Collection<string> res, 
		Collection<string> items
	)
	{
		Vector<string> r = new Vector();
		for (int i=0; i<items.count(); i++)
		{
			string item_name = items.item(i);
			if (res.indexOf(item_name) == -1)
			{
				r.push(item_name);
			}
		}
		return res.appendCollectionIm(r);
	}
	
	
	
	/**
	 * Returns all components
	 * @param Collection<string> views
	 * @return Collection<string>
	 */
	pure Collection<string> getAllComponents(Collection<string> views)
	{
		/* Add components from views */
		Collection<string> res = new Collection(views);
		
		/* Add require components */
		Collection<string> w = null;
		while (w != res)
		{
			w = res;
			for (int i=0; i<w.count(); i++)
			{
				string class_name = w.item(i);
				Collection<string> components = ( method(class_name, "components") )();
				res = static::addUniqueItems(res, components);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Returns assets by views
	 * @param Collection<string> views
	 * @return Collection<string>
	 */
	pure Collection<string> loadAssetsFromComponents(Collection<string> components, RenderContainer container = null)
	{
		/* Add assets from components */
		Collection<string> res = new Collection();
		if (components == null) return res;
		
		for (int i=0; i<components.count(); i++)
		{
			string class_name = components.item(i);
			Collection<string> assets = ( method(class_name, "assets") )();
			res = static::addUniqueItems(res, assets);
		}
		
		
		/* Add require assets */
		Collection<string> w = null;
		while (w != res)
		{
			w = res;
			for (int i=0; i<w.count(); i++)
			{
				string class_name = w.item(i);
				Collection<string> assets = ( method(class_name, "getRequiredAssets") )(container);
				res = static::addUniqueItems(res, assets);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Returns assets
	 * @param Collection<string> assets
	 * @return Collection<string>
	 */
	pure memorize Collection<string> loadAsyncResources(Collection<string> assets)
	{
		Collection<string> res = new Collection();
		if (assets == null) return res;
		
		for (int i=0; i<assets.count(); i++)
		{
			string assets_name = assets.item(i);
			Collection<mixed> r = ( method(assets_name, "assetsAsyncLoad") )(null);
			for (int j=0; j<r.count(); j++)
			{
				string arr = r.item(j);
				res = static::addUniqueItems(res, arr);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Returns css string
	 * @param Collection<string> components
	 * @param Dict<string> css_vars
	 * @return string
	 */
	pure memorize string getCSSFromComponents(Collection<string> components, Dict<string> css_vars)
	{
		Vector<string> res = new Vector();
		
		for (int i=0; i<components.count(); i++)
		{
			string component_name = components.item(i);
			string css = ( method(component_name, "css") )(css_vars);
			res.push(css);
		}
		
		string s = res.reduce( lambda string (string res, string s) => res ~ s, "" );
		return s;
	}
	
	
	
	/**
	 * Init render container
	 * @param RenderContainer container
	 * @return RenderContainer
	 */
	pure RenderContainer initRenderContainer(RenderContainer container)
	{
		return container;
	}
	
}