/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.Compiler;

use BayrellLang.Utils as BayrellLangUtils;
use BayrellLang.LangBay.ParserBayFactory;


class ModuleInfo
{
	public string name = "";
	public string version = "";
	Collection<string> requiredModules = null;
	Collection<string> files = null;
	Collection<Dict> entities = null;
	
	
	/**
	 * Read module and return ModuleInfo
	 * @param ContextInterface context
	 * @param ApiEditorProvider api_editor
	 * @param string module_name
	 * @return ModuleInfo
	 */
	public static async string getModuleFilePath
	(
		ContextInterface context,
		string module_name
	)
	{
		ModuleSearchDriver driver = context.getDriver("BayrellLang.Compiler.ModuleSearchDriver");
		string s = await driver.findModule(module_name);
		return s;
	}
	
	
	
	/**
	 * Read module and return ModuleInfo
	 * @param ContextInterface context
	 * @param ApiEditorProvider api_editor
	 * @param string module_name
	 * @return ModuleInfo
	 */
	public static async ModuleInfo readModule
	(
		ContextInterface context,
		string module_name
	)
	{
		string module_path = await static::getModuleFilePath(context, module_name);
		if (module_path == "") return null;
		
		FileSystemProvider fs = context.getProvider("default.fs");
		string file_path = module_path ~ "/ModuleDescription.bay";
		string source = await fs::readFile(context, fs, file_path);
		BaseOpCode op_code = BayrellLangUtils::getAST(context, new ParserBayFactory(), source);
		
		
		
		return new ModuleInfo
		{
			"name": module_name,
		};
	}
	
}
