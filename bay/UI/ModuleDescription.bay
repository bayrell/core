/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Core.UI;

use Runtime.Interfaces.ContextInterface;
use Runtime.Interfaces.ModuleDescriptionInterface;
use Core.Interfaces.AssetsInterface;
use Core.UI.Render.RenderContainer;


class ModuleDescription implements 
	ModuleDescriptionInterface,
	AssetsInterface
{

	
	/**
	 * Returns module name
	 * @return string
	 */
	lambda string getModuleName() => "Core.UI";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	lambda string getModuleVersion() => "0.7.3";
	
	
	
	/**
	 * Returns required modules
	 * @return Dict<string>
	 */
	lambda Dict<string> requiredModules() =>
	{
		'Runtime': '>=0.3',
		'Core.Interfaces': '*',
		'Core.Http': '*',
	};
	
	
	
	/**
	 * Returns module files load order
	 * @return Collection<string>
	 */
	lambda Collection<string> getModuleFiles() => 
	[
		"Core.UI.UIController",
		"Core.UI.Annotations.ApiInstance",
		"Core.UI.Annotations.ControllerAnnotation",
		"Core.UI.Annotations.RouteInfo",
		"Core.UI.Annotations.RoutesInstance",
		"Core.UI.Events.CommandEvent",
		"Core.UI.Events.ComponentEvent",
		"Core.UI.Events.ModelChange",
		"Core.UI.Events.MountEvent",
		"Core.UI.Events.UpdateStateEvent",
		"Core.UI.Events.UserEvent.UserEvent",
		"Core.UI.Render.CoreManager",
		"Core.UI.Render.CoreRoute",
		"Core.UI.Render.CoreView",
		"Core.UI.Render.RenderContainer",
		"Core.UI.Render.RenderHelper",
		"Core.UI.Render.WebContainer",
		"Core.UI.Assets",
		"Core.UI.Animations.FadeIn",
		"Core.UI.Animations.FadeOut",
		"Core.UI.Annotations.BindModel",
		"Core.UI.Annotations.BindValue",
		"Core.UI.Annotations.Event",
		"Core.UI.Annotations.EventAsync",
		"Core.UI.Annotations.SignalOut",
		"Core.UI.Events.KeyboardEvent.KeyboardEvent",
		"Core.UI.Events.MouseEvent.MouseEvent",
		"Core.UI.Events.UserEvent.BlurEvent",
		"Core.UI.Events.UserEvent.ChangeEvent",
		"Core.UI.Events.UserEvent.FocusEvent",
		"Core.UI.Render.CoreLayout",
		"Core.UI.Events.KeyboardEvent.KeyDownEvent",
		"Core.UI.Events.KeyboardEvent.KeyPressEvent",
		"Core.UI.Events.KeyboardEvent.KeyUpEvent",
		"Core.UI.Events.MouseEvent.MouseClickEvent",
		"Core.UI.Events.MouseEvent.MouseContextMenuEvent",
		"Core.UI.Events.MouseEvent.MouseDoubleClickEvent",
		"Core.UI.Events.MouseEvent.MouseDownEvent",
		"Core.UI.Events.MouseEvent.MouseEnterEvent",
		"Core.UI.Events.MouseEvent.MouseLeaveEvent",
		"Core.UI.Events.MouseEvent.MouseMoveEvent",
		"Core.UI.Events.MouseEvent.MouseOutEvent",
		"Core.UI.Events.MouseEvent.MouseOverEvent",
		"Core.UI.Events.MouseEvent.MouseUpEvent",
	];
	
	
	
	/**
	 * Returns enities
	 */
	lambda Collection<Dict> entities() => null;
	
	
	
	/**
	 * Returns required assets
	 * @return Collection<string>
	 */	
	lambda Collection<string> assets(RenderContainer context) => null;
	
	
	
	/**
	 * Returns sync loaded files
	 */		
	lambda Vector<string> resources(RenderContainer context) => null;
	
	
	
	/**
	 * Init render container
	 */
	lambda RenderContainer initContainer(RenderContainer container) => container;
	
	
	
	/**
	 * Get lambda filters
	 */
	lambda Collection<LambdaFilter> lambdaFilters() => null;
	
	
	
	/**
	 * Called then module registed in context
	 * @param ContextInterface context
	 */
	public static void onRegister(ContextInterface context){}
	
	
	
	/**
	 * Called then context read config
	 * @param Map<mixed> config
	 */
	public static void onReadConfig(ContextInterface context, Map<mixed> config){}
	
	
	
	/**
	 * Init context
	 * @param ContextInterface context
	 */
	public static void onInitContext(ContextInterface context){}
	
}