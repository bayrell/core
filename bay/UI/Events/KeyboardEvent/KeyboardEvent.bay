/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Core.UI.Events.KeyboardEvent;

use Runtime.CoreEvent;
use Runtime.Interfaces.CloneableInterface;
use Runtime.Interfaces.SerializeInterface;
use Core.UI.Events.UserEvent.UserEvent;


struct KeyboardEvent extends UserEvent
{
	
	public bool altKey = false;
	public int charCode = 0;
	public string code = "";
	public bool ctrlKey = false;
	public string key = false;
	public int keyCode = 0;
	public string locale = "";
	public int location = 0;
	public bool repeat = false;
	public bool shiftKey = false;
	public int which = 0;
	public string value = "";
	
	
	#switch
	#case ifcode ES6 then
	
	assignEvent(e){
		super.assignEvent(e);
		this.setMap(new Runtime.Dict({
			"altKey": e.altKey,
			"charCode": e.charCode,
			"code": e.code,
			"ctrlKey": e.ctrlKey,
			"key": e.key,
			"keyCode": e.keyCode,
			"locale": e.locale,
			"location": e.location,
			"repeat": e.repeat,
			"shiftKey": e.shiftKey,
			"which": e.which,
			"value": e.currentTarget.value,
		}));
	}
	
	#endswitch
	
	
}

