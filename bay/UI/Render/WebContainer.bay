/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.UI.Render;

use Runtime.CoreStruct;
use Runtime.Interfaces.ModuleDescriptionInterface;
use Core.Interfaces.AssetsInterface;
use Core.Interfaces.ComponentInterface;
use Core.Http.Request;
use Core.Http.Response;
use Core.Http.Session;
use Core.Http.WebFile;
use Core.UI.Annotations.RouteInfo;
use Core.UI.Render.LayoutModel;
use Core.UI.Render.RenderHelper;
use Core.UI.Render.RenderResult;


struct WebContainer extends CoreStruct
{
	public Request request = null;
	public RenderResult render = null;
	public Response response = null;
	public RouteInfo route_info = null;
	public Collection<Cookie> cookies = null;
	public Map<string> params = null;	
	
	
	
	/**
	 * Render view
	 */
	public static WebContainer renderView(ContextInterface context, WebContainer container)
	{
		RenderResult render_result = container.render;
		if (render_result == null)
		{
			return container;
		}
		
		LayoutModel layout_model = render_result.layout_model;
		if (layout_model == null)
		{
			layout_model = new LayoutModel();
		}
		
		/* Render view */
		string content = RenderHelper::render( render_result.view_class, render_result.view_model );
		
		/* Get modules name */
		Collection<string> arr = [ render_result.view_class ];
		if (render_result.layout_class != "") arr.push(render_result.layout_class);
		arr = arr.map(
			string (string class_name){ return (method (class_name, "moduleDescription"))(); }
		);
		
		/* Get all assets and components */
		Collection<string> modules = RenderHelper::getModules(arr, layout_model);
		Collection<string> assets = modules.filter
		(
			bool (string class_name)
			{
				bool is_assets = 
					rtl::class_implements(class_name, classof AssetsInterface) or
					rtl::class_implements(class_name, classof ModuleDescriptionInterface) or
					rtl::class_implements(class_name, classof ComponentInterface)
				;
				return is_assets;
			}
		);
		Collection<string> components = modules.filter
		(
			bool (string class_name)
			{
				bool is_component = rtl::class_implements(class_name, classof ComponentInterface);
				return is_component;
			}
		);
		
		/* Init layout model */
		layout_model = RenderHelper::initRenderContainer(layout_model);
		layout_model = layout_model.copy({
			"modules": modules,
			"assets": assets,
			"components": components,
			"content": content,
		});
		
		container <= render <= layout_model <= layout_model;
		return container;
	}
	
	
	
	/**
	 * Render layout
	 */
	public static WebContainer renderLayout(ContextInterface context, WebContainer container)
	{
		if (container.render == null)
		{
			return container;
		}
		
		if (container.render.layout_class == "" or container.render.layout_model == null)
		{
			return container;
		}
		
		LayoutModel layout_model = container.render.layout_model.copy({
			"view": container.render.view_class,
			"model": container.render.view_model,
		});
		container <= render <= layout_model <= layout_model;
		
		content = RenderHelper::render( container.render.layout_class, container.render.layout_model );
		container <= response <= new Response{ "content": content };
		
		return container;
	}
	
	
	
	/**
	 * Render container
	 */
	public static async WebContainer response(ContextInterface context, WebContainer container)
	{
		if (container.response != null)
		{
			return container;
		}
		
		if (container.render == null)
		{
			return container;
		}
		
		container = static::renderView(context, container);
		container = static::renderLayout(context, container);
		
		return container;
	}
	
	
}