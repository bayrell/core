/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Core.UI.Render;

use Runtime.CoreStruct;
use Runtime.RuntimeUtils;
use Core.UI.Assets;
use Core.UI.Render.LayoutModel;
use Core.UI.Render.CoreView;
use Core.UI.Render.RenderHelper;


struct CoreLayout extends CoreView
{
	
	/**
	 * Returns module name
	 */
	lambda string moduleName() => "Core.UI";
	
	
	
	/**
	 * Required Assets
	 */
	lambda Collection<string> assets() =>
		[
			classof Assets,
		]
	;
	
	
	
	/**
	 * Required components
	 */
	lambda Collection<string> components() =>
		[
			
			
		]
	;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			*{box-sizing: border-box;}body{margin:0;padding:0;}
		}
	;
	
	
	
	/**
	 * Render head
	 */
	lambda Template head(LayoutModel data) =>
		return 
			<meta name='Content-Type' content='text/html; charset=utf-8'/>
			<title>@{ data.title }</title>
		;
	
	
	
	/**
	 * Patch modules
	 */
	lambda Collection<string> patchAssets(LayoutModel data, Collection<string> arr)
	{
		arr = arr.map
		(
			string (string name) use (data)
			{
				if (name[0] == "@")
				{
					int pos = rs::strpos(name, "/");
					string module_name = rs::substr(name, 1, pos - 1);
					string path = rs::substr(name, pos);
					name = "/assets/" ~ module_name ~ path;
				}
				return name;
			}
		);
		return arr;
	}
	
	
	
	/**
	 * Render assets in header
	 */
	lambda Template assetsHeader(LayoutModel data)
	{
		Collection<string> resources = RenderHelper::loadResources(data.assets);
		Collection<string> css_arr = resources.filter
		(
			string (string name) => rs::extname(name) == "css"
		);
		css_arr = static::patchAssets(data, css_arr);
		css_arr = css_arr.map( Template (string css) => <link rel='stylesheet' href={ css } />  );
		
		string css = static::css(data.css_vars);
		css ~= RenderHelper::getCSSFromComponents(data.components, data.css_vars);
		
		return <>
			{ css_arr }
			<style type='text/css'>@raw{ css }</style>
		</>;
	}
	
	
	
	/**
	 * Render assets in body
	 */
	lambda Template assetsBody(LayoutModel data)
	{
		Collection<string> resources = RenderHelper::loadResources(data.assets);
		Collection<string> js_arr = resources.filter
		(
			string (string name) => rs::extname(name) == "js"
		);
		js_arr = js_arr.pushIm("@Core.UI/es6/Drivers/RenderDriver.js");
		js_arr = js_arr.pushIm("@Core.UI/es6/Drivers/ApiBusDriver.js");
		js_arr = static::patchAssets(data, js_arr);
		js_arr = js_arr.map( Template (string js) => <script src={ js }></script> );
		return js_arr;
	}
	
	
	
	/**
	 * Content render
	 */
	lambda Template content(LayoutModel data) => return data.content;
	
	
	
	/**
	 * Component render
	 */
	lambda Template render(LayoutModel data) =>
		return <!DOCTYPE html>
			<html>
			<head>
				{ static::head( data ) }
				{ static::assetsHeader( data ) }
			</head>
			<body>
				<div id='root'>@raw{ static::content( data ) }</div>
				<input id='view' value={ data.view } style="display: none;" />
				<input id='model' 
					value={ RuntimeUtils::base64_encode(rtl::json_encode(data.model)) } 
					style="display: none;" 
				/>
				<div id='scripts'>
					{ static::assetsBody( data ) }
				</div>
			</body>
		</html>
	;
	
	
}