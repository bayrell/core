/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.UI.Annotations;

use Core.UI.Annotations.AnnotationEvent;
use Core.UI.Events.UserEvent.ChangeEvent;


struct EventAsync extends AnnotationEvent
{
	
	string event = "";
	string method_name = "";
	bool cancel = false;
	bool preventDefault = false;
	
	
	/**
	 * OnEvent
	 */
	Collection<string> events()
	{
		return [
			this.event,
		];
	}
	
	
	
	/**
	 * OnEvent
	 */
	static void onEvent(CoreManager manager, UIEvent e)
	{
		if (e.annotation.cancel) e.event.cancel();
		else if (e.annotation.preventDefault) e.event.preventDefault();
		callback f = rtl::methodAwait(manager, e.annotation.method_name);
		f(e);
	}
	
	
	
	/**
	 * Add Emitter
	 */
	static void addEmitter(CoreManager manager, Emitter emitter, UIStruct ui, AnnotationEvent annotation)
	{
		emitter.addMethod(static::onEventFactory(manager, ui, annotation), [annotation.event]);
	}
	
}