/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.UI.Annotations;

use Runtime.Interfaces.ContextInterface;
use Runtime.CoreStruct;
use Core.UI.Render.CoreManager;
use Core.UI.UIController;
use Core.UI.UIEvent;


struct AnnotationEvent extends CoreStruct
{
	
	
	/**
	 * OnEvent
	 */
	Collection<string> events()
	{
		return [
		];
	}
	
	
	
	/**
	 * OnEvent
	 */
	static void onEvent(CoreManager manager, UIEvent e)
	{
	}
	
	
	
	/**
	 * Factory onEvent
	 */
	static fun onEventFactory(CoreManager manager, UIStruct ui, AnnotationEvent annotation) =>
		void (CoreEvent event)
		{
			UIEvent<CoreEvent> ui_event = new UIEvent(
				{
					"annotation": annotation,
					"event": event,
					"ui": ui,
				}
			);
			static::onEvent(manager, ui_event);
		}
		
		
	
	
	/**
	 * Add Emitter
	 */
	static void addEmitter(CoreManager manager, Emitter emitter, UIStruct ui, AnnotationEvent annotation)
	{
	}
	
	
	
	/**
	 * Dispatch Event
	 */
	static void dispatch
	(
		CoreManager manager,
		UIStruct ui,
		AnnotationEvent annotation,
		CoreEvent event,
		Reference ref = null
	)
	{
		UIEvent<CoreEvent> ui_event = new UIEvent(
			{
				"annotation": annotation,
				"event": event,
				"ref": ref,
				"ui": ui,
			}
		);
		static::onEvent(manager, ui_event);
	}
	
}